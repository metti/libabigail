From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Matthias Maennich <maennich@google.com>
Date: Mon, 9 Dec 2019 13:35:23 +0000
Subject: dwarf-reader: name based lookup: add support for aliased symbols

Symbols might be aliased in the .symtab in the sense that symbols refer
to the same address in a text section. E.g. '__memcpy' and 'memcpy'
might share the same address. When looking up the ksymtab symbol by
name, ensure we follow potential aliases to find a valid elf_symbol
object for lookup in the addr->symbol map.

Also, early exit from the lookup loops once we found a match.

	* src/abg-dwarf-reader.cc (populate_symbol_map_from_ksymtab):
        add support aliased symbols for name based symbol lookup.

Fixes: 57798599453f ("dwarf-reader: name based lookup: add support for aliased symbols")
Signed-off-by: Matthias Maennich <maennich@google.com>
---
 src/abg-dwarf-reader.cc | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/abg-dwarf-reader.cc b/src/abg-dwarf-reader.cc
index e07697673af5..db3c0860c30b 100644
--- a/src/abg-dwarf-reader.cc
+++ b/src/abg-dwarf-reader.cc
@@ -8176,14 +8176,15 @@ public:
 			= fun_syms().find(name);
 		    if (it != fun_syms().end())
 		      {
-			symbol = it->second[0];
+			symbol = it->second[0]->get_main_symbol();
 			for (I = fun_addr_sym_map().begin(),
 			    E = fun_addr_sym_map().end();
 			     I != E; ++I)
 			  {
-			    if (I->second->get_name() == name)
+			    if (I->second->get_name() == symbol->get_name())
 			      {
 				adjusted_symbol_address = I->first;
+				break;
 			      }
 			  }
 		      }
@@ -8195,14 +8196,15 @@ public:
 			it = var_syms().find(name);
 			if (it != var_syms().end())
 			  {
-			    symbol = it->second[0];
+			    symbol = it->second[0]->get_main_symbol();
 			    for (I = var_addr_sym_map().begin(),
 				E = var_addr_sym_map().end();
 				 I != E; ++I)
 			      {
-				if (I->second->get_name() == name)
+				if (I->second->get_name() == symbol->get_name())
 				  {
 				    adjusted_symbol_address = I->first;
+				    break;
 				  }
 			      }
 			  }
